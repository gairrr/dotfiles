global !p
from snippet_helpers import *
def make_end_label(text):
  return "<!-- /" + text + " -->" if text else ""
endglobal

#  ___ templates ___

snippet ! "html template" b
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="${2:Meta Description Here.}">
  <meta name="format-detection" content="email=no, telephone=no, address=no">${3:
  <meta name="robots" content="noindex, nofollow">}
  <link rel="stylesheet" href="/assets/styles/style.css">
  <link rel="icon" href="/favicon.ico">
  <link rel="icon" type="image/png" href="/icon-192x192.png">
  <link rel="apple-touch-icon" type="image/png" href="/apple-touch-icon-180x180.png">
  <link rel="canonical" href="https://example.com">
  <script src="/assets/scripts/main.js" defer></script>
  <title>${1:Title Here.}</title>
</head>
<body class="${4:page}">
</body><!-- $4 -->
</html>
endsnippet

# ___ document metadata ___

# link
# meta
# style

# ___ sections ___

snippet article "article element" b
<article class="$1">
  ${0:${VISUAL}}
</article>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet section "section element" b
<section class="$1">
  ${0:${VISUAL}}
</section>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet nav "nav element" b
<nav class="$1">
  ${0:${VISUAL}}
</nav>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet aside "aside element" b
<aside class="$1">
  ${0:${VISUAL}}
</aside>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet "h([1-6])" "h1-h6 element" br
<h`!p snip.rv = match.group(1)` class="$1">${0:${VISUAL}}</h`!p snip.rv = match.group(1)`>
endsnippet

# hgroup

snippet header "header element" b
<header class="$1">
  ${0:${VISUAL}}
</header>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet footer "footer element" b
<footer class="$1">
  ${0:${VISUAL}}
</footer>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet address "address element" b
<address class="$1">
  ${0:${VISUAL}}
</address>`!p snip.rv = make_end_label(t[1])`
endsnippet

# ___ grouping content ___

snippet p "p element" b
<p class="$1">${0:${VISUAL}}</p>
endsnippet

# hr
# pre
# blockquote

snippet ol "ol element" b
<ol class="$1">
  ${0:${VISUAL}}
</ol>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet ul "ul element" b
<ul class="$1">
  ${0:${VISUAL}}
</ul>`!p snip.rv = make_end_label(t[1])`
endsnippet

# menu

snippet li "li element" b
<li class="$1">
  ${0:${VISUAL}}
</li>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet dl "dl element" b
<dl class="$1">
  ${0:${VISUAL}}
</li>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet dt "dt element" b
<dt class="$1">${0:${VISUAL}}</dt>
endsnippet

snippet dd "dd element" b
<dd class="$1">${0:${VISUAL}}</dd>
endsnippet

snippet figure "figure element" b
<figure class="$1">${0:${VISUAL}}</figure>
endsnippet

snippet main "main element" b
<main class="$1">
  ${0:${VISUAL}}
</main>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet div "div element" b
<div class="$1">${0:${VISUAL}}</div>
endsnippet

context "is_visual_line_mode(snip)"
snippet div "div element" b
<div class="$1">
  ${0:${VISUAL}}
</div>`!p snip.rv = make_end_label(t[1])`
endsnippet

# ___ text-level semantics ___

snippet a "a element" w
<a class="$1" href="#$2">${0:${VISUAL}}</a>
endsnippet

context "is_visual_line_mode(snip)"
snippet a "wrap with a element" b
<a class="$1" href="#$2">
  ${0:${VISUAL}}
</a>`!p snip.rv = make_end_label(t[1])`
endsnippet

# em
# strong

snippet small "small element" w
<small>${0:${VISUAL}}</small>
endsnippet

# s
# cite
# q
# dfn
# abbr
# ruby
# rt
# rp
# data

snippet time "time element" w
<time datetime="${VISUAL/\./-/g}">${0:${VISUAL}}</time>
endsnippet

# code
# var
# samp
# kbd
# sub
# sup
# i
# b
# u
# mark
# bdi
# bdo

snippet span "span element" i
<span class="$1">${0:${VISUAL}}</span>
endsnippet

snippet "br" "br element" ri
<br$1>
endsnippet

# wbr

# ___ edits ___

# ins
# del

# ___ embedded content ___

# picture
# source

snippet img "img element" w
<img class="$1" src="/$2" alt="$3">
endsnippet

# iframe
# embed
# object
# param
# video
# audio
# track
# map
# area

# ___ tabular data ___

snippet table "table element" b
<table class="$1">
  ${0:${VISUAL}}
</table>`!p snip.rv = make_end_label(t[1])`
endsnippet

# caption
# colgroup
# col

snippet tbody "tbody element" b
<tbody class="$1">
  ${0:${VISUAL}}
</tbody>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet thead "thead element" b
<thead class="$1">
  ${0:${VISUAL}}
</thead>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet tfoot "tfoot element" b
<tfoot class="$1">
  ${0:${VISUAL}}
</tfoot>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet tr "tr element" b
<tr class="$1">
  ${0:${VISUAL}}
</tr>`!p snip.rv = make_end_label(t[1])`
endsnippet

snippet td "td element" b
<td class="$1">${0:${VISUAL}}</td>
endsnippet

snippet th "th element" b
<th class="$1">${0:${VISUAL}}</th>
endsnippet

# ___ forms ___

snippet form "form element" b
<form class="$1">
  ${0:${VISUAL}}
</form>`!p snip.rv = make_end_label(t[1])`
endsnippet

# label

snippet input "input element" b
<input type="${1:text}" name="${2:$1}" id="${3:$2}" class="$0">
endsnippet

snippet button "button element" b
<button class="$1" type="${2:button}">${0:${VISUAL}}</button>
endsnippet

# select
# datalist
# optgroup
# option
# textarea
# output
# progress
# meter
# fieldset
# legend

# ___ interactive elements ___

# details
# summary
# dialog

# ___ scripting ___

# script
# noscript
# template
# slot
# canvas

# ___ attributes ___

snippet " #" "id attribute" rwA
 id="$0"
endsnippet

snippet " \." "class attribute" rwA
 class="$0"
endsnippet

# ___ utilities ___

context "re.match('^\s*<[a-z1-6]+.*?>.*?</[a-z1-6]+>', snip.buffer[snip.line])"
pre_expand "remove_right_side_of_the_cursor(snip)"
snippet '<([a-z1-6]+).*?( class="(.*?)")?.*?>' "expand the tag (with the end label if has class value)" rb

  $0
</`!p snip.rv = match.group(1)`>`!p snip.rv = make_end_label(match.group(3))`
endsnippet
