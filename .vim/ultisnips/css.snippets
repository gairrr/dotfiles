global !p
from snippet_helpers import *
endglobal

# ___ visual formatting model ___

snippet di "display" b
display: $0
endsnippet

snippet fl "flex" b
flex: $0
endsnippet

snippet flg "flex-grow" b
flex-grow: $0
endsnippet

snippet flsh "flex-shrink" b
flex-shrink: $0
endsnippet

snippet flb "flex-basis" b
flex-basis: $0
endsnippet

snippet flf "flex-flow" b
flex-flow: $0
endsnippet

snippet fld "flex-direction" b
flex-direction: $0
endsnippet

snippet flw "flex-wrap" b
flex-wrap: $0
endsnippet

snippet jc "justify-content" b
justify-content: $0
endsnippet

snippet ac "align-content" b
align-content: $0
endsnippet

snippet ai "align-items" b
align-items: $0
endsnippet

snippet as "align-self" b
align-self: $0
endsnippet

snippet od "order" b
order: $0
endsnippet

snippet vis "visibility" b
visibility: $0
endsnippet

snippet op "opacity" b
opacity: $0
endsnippet

snippet cp "clip-path" b
clip-path: $0
endsnippet

snippet ls "list-style" b
list-style: $0
endsnippet

snippet lst "list-style-type" b
list-style-type: $0
endsnippet

snippet lsp "list-style-position" b
list-style-position: $0
endsnippet

snippet lsi "list-style-image" b
list-style-image: $0
endsnippet

snippet ps "position" b
position: $0
endsnippet

snippet tp "top" b
top: $0
endsnippet

snippet ri "right" b
right: $0
endsnippet

snippet bot "bottom" b
bottom: $0
endsnippet

snippet lf "left" b
left: $0
endsnippet

snippet zi "z-index" b
z-index: $0
endsnippet

snippet flt "float" b
float: $0
endsnippet

snippet clr "clear" b
clear: $0
endsnippet

snippet tf "transform" b
transform: $0
endsnippet

# ___ box model ___

snippet wi "width" b
width: $0
endsnippet

snippet miw "min-width" b
min-width: $0
endsnippet

snippet maw "max-width" b
max-width: $0
endsnippet

snippet hi "height" b
height: $0
endsnippet

snippet mih "min-height" b
min-height: $0
endsnippet

snippet mah "max-height" b
max-height: $0
endsnippet

snippet mg "margin" b
margin: $0
endsnippet

snippet mt "margin-top" b
margin-top: $0
endsnippet

snippet mr "margin-right" b
margin-right: $0
endsnippet

snippet mra "margin-right: auto" b
margin-right: auto;
endsnippet

snippet mb "margin-bottom" b
margin-bottom: $0
endsnippet

snippet ml "margin-left" b
margin-left: $0
endsnippet

snippet mla "margin-left: auto" b
margin-left: auto;
endsnippet

snippet pd "padding" b
padding: $0
endsnippet

snippet pt "padding-top" b
padding-top: $0
endsnippet

snippet pr "padding-right" b
padding-right: $0
endsnippet

snippet pb "padding-bottom" b
padding-bottom: $0
endsnippet

snippet pl "padding-left" b
padding-left: $0
endsnippet

snippet of "overflow" b
overflow: $0
endsnippet

snippet ofx "overflow-x" b
overflow-x: $0
endsnippet

snippet ofy "overflow-y" b
overflow-y: $0
endsnippet

snippet bd "border" b
border: $0
endsnippet

snippet bdt "border-top" b
border-top: $0
endsnippet

snippet bdr "border-right" b
border-right: $0
endsnippet

snippet bdb "boder-bottom" b
border-bottom: $0
endsnippet

snippet bdl "border-left" b
border-left: $0
endsnippet

snippet bdw "border-width" b
border-width: $0
endsnippet

snippet bdtw "border-top-width" b
border-top-width: $0
endsnippet

snippet bdrw "border-right-width" b
border-right-width: $0
endsnippet

snippet bdbw "border-bottom-width" b
border-bottom-width: $0
endsnippet

snippet bdlw "border-left-width" b
border-left-width: $0
endsnippet

snippet bds "border-style" b
border-style: $0
endsnippet

snippet bdts "border-top-style" b
border-top-style: $0
endsnippet

snippet bdrs "border-right-style" b
border-right-style: $0
endsnippet

snippet bdbs "border-bottom-style" b
border-bottom-style: $0
endsnippet

snippet bdls "border-left-style" b
border-left-style: $0
endsnippet

snippet bdcl "border-color" b
border-color: $0
endsnippet

snippet bdtcl "border-top-color" b
border-top-color: $0
endsnippet

snippet bdrcl "border-right-color" b
border-right-color: $0
endsnippet

snippet bdbcl "border-bottom-color" b
border-bottom-color: $0
endsnippet

snippet bdlcl "border-left-color" b
border-left-color: $0
endsnippet

snippet bdi "border-image" b
border-image: $0
endsnippet

snippet bdti "border-top-image" b
border-top-image: $0
endsnippet

snippet bdri "border-right-image" b
border-right-image: $0
endsnippet

snippet bdbi "border-bottom-image" b
border-bottom-image: $0
endsnippet

snippet bdli "border-left-image" b
border-left-image: $0
endsnippet

snippet bdrd "border-radius" b
border-radius: $0
endsnippet

snippet bdtlrs "border-top-left-radius" b
border-top-left-radius: $0
endsnippet

snippet bdtrrs "border-top-right-radius" b
border-top-right-radius: $0
endsnippet

snippet bdbrrs "border-bottom-right-radius" b
border-bottom-right-radius: $0
endsnippet

snippet bdblrs "border-bottom-left-radius" b
border-bottom-left-radius: $0
endsnippet

snippet bxz "box-sizing" b
box-sizing: $0
endsnippet

snippet bxsh "box-shadow" b
box-shadow: $0
endsnippet

# ___ background ___

snippet bg "background" b
background: $0
endsnippet

snippet bgi "background-image" b
background-image: $0
endsnippet

snippet bgp "background-position" b
background-position: $0
endsnippet

snippet bgz "background-size" b
background-size: $0
endsnippet

snippet bgr "background-repeat" b
background-repeat: $0
endsnippet

snippet bgo "background-origin" b
background-origin: $0
endsnippet

# snippet bgc "background-clip" b
# background-clip: $0
# endsnippet

snippet bga "background-attachment" b
background-attachment: $0
endsnippet

snippet bgc "background-color" b
background-color: $0
endsnippet

# __ font, text, and color ___

snippet cl "color" b
color: $0
endsnippet

snippet fo "font" b
font: $0
endsnippet

snippet fs "font-style" b
font-style: $0
endsnippet

snippet fv "font-variant" b
font-variant: $0
endsnippet

snippet fw "font-weight" b
font-weight: $0
endsnippet

snippet fst "font-stretch" b
font-stretch: $0
endsnippet

snippet fz "font-size" b
font-size: $0
endsnippet

snippet lh "line-height" b
line-height: $0
endsnippet

snippet ff "font-family" b
font-family: $0
endsnippet

snippet lts "letter-spacing" b
letter-spacing: $0
endsnippet

snippet td "text-decoration" b
text-decoration: $0
endsnippet

snippet tdc "text-decoration-color" b
text-decoration-color: $0
endsnippet

snippet tds "text-decoration-style" b
text-decoration-style: $0
endsnippet

snippet tdl "text-decoration-line" b
text-decoration-line: $0
endsnippet

snippet ta "text-align" b
text-align: $0
endsnippet

snippet ti "text-indent" b
text-indent: $0
endsnippet

snippet ttf "text-transform" b
text-transform: $0
endsnippet

snippet wm "writing-mode" b
writing-mode: $0
endsnippet

snippet ws "white-space" b
white-space: $0
endsnippet

snippet wb "word-break" b
word-break: $0
endsnippet

snippet wsp "word-spacing" b
word-spacing: $0
endsnippet

snippet ww "word-wrap" b
word-wrap: $0
endsnippet

snippet tsh "text-shadow" b
text-shadow: $0
endsnippet

# ___ table ___

snippet tl "table-layout" b
table-layout: $0
endsnippet

snippet bdcp "border-collapse" b
border-collapse: $0
endsnippet

snippet bdsp "border-spacing" b
border-spacing: $0
endsnippet

snippet ec "empty-cells" b
empty-cells: $0
endsnippet

snippet cs "caption-side" b
caption-side: $0
endsnippet

snippet va "vertical-align" b
vertical-align: $0
endsnippet

# ___ user interface ___

snippet con "content" b
content: $0
endsnippet

snippet quo "quotes" b
quotes: $0
endsnippet

snippet ci "counter-increment" b
counter-increment: $0
endsnippet

snippet cr "counter-reset" b
counter-reset: $0
endsnippet

snippet ot "outline" b
outline: $0
endsnippet

snippet otcl "outline-color" b
outline-color: $0
endsnippet

snippet ots "outline-style" b
outline-style: $0
endsnippet

snippet otw "outline-width" b
outline-width: $0
endsnippet

snippet cur "cursor" b
cursor: $0
endsnippet

snippet rz "resize" b
resize: $0
endsnippet

# ___ animation ___

snippet ts "transition" b
transition: $0
endsnippet

snippet tsp "transition-property" b
transition-property: $0
endsnippet

snippet tsd "transition-duration" b
transition-duration: $0
endsnippet

snippet tstf "transition-timing-function" b
transition-timing-function: $0
endsnippet

snippet tsdl "transition-delay" b
transition-delay: $0
endsnippet

snippet am "animation" b
animation: $0
endsnippet

snippet amn "animation" b
animation-name: $0
endsnippet

snippet amd "animation-duration" b
animation-duration: $0
endsnippet

snippet amtf "animation-timing-function" b
animation-timing-function: $0
endsnippet

snippet amdl "animation-delay" b
animation-delay: $0
endsnippet

snippet amic "animation-iteration-count" b
animation-iteration-count: $0
endsnippet

snippet amdi "animation-direction" b
animation-direction: $0
endsnippet

snippet amfm "animation-fill-mode" b
animation-fill-mode: $0
endsnippet

snippet amps "animation-play-state" b
animation-play-state: $0
endsnippet

# ___ other properties ___

snippet ub "unicode-bidi" b
unicode-bidi: $0
endsnippet

# snippet di "direction" b
# direction: $0
# endsnippet

snippet pbb "page-break-before" b
page-break-before: $0
endsnippet

snippet pba "page-break-after" b
page-break-after: $0
endsnippet

snippet pbi "page-break-inside" b
page-break-inside: $0
endsnippet

snippet win "windows" b
windows: $0
endsnippet

snippet or "orphans" b
orphans: $0
endsnippet

# ___ at rules ___

snippet @charset "@charset" b
@charset 'utf-8';
endsnippet

snippet @media "@media queries" b
@media screen and (min-width: $breakpoint_$1) {
  $0
}
endsnippet

# ___ utilities ___

snippet " ?{" "expand the block" riA
 {
  ${0:${VISUAL}}
}
endsnippet

snippet "#((?:[0-9a-fA-F]{1,2}){3})" "hex color codes must be lowercase" rwA
#`!p snip.rv = match.group(1).lower()`
endsnippet

post_jump "escape_hat_pos(); update();"
snippet ",([rgb])" "debug code" rbA
`!p
flag = match.group(1)
if flag == "r":
  rgb = "255,0,0"
elif flag == "g":
  rgb = "0,255,0"
elif flag == "b":
  rgb = "0,0,255"
else:
  rgb = "0,0,0"
`$0/* debug */ background-color: rgba(`!p snip.rv = rgb`,.2);
endsnippet

snippet "([+-]?(?:\d+\.?\d*|\.\d+))(px|em|rem)([per])" "convert units" rwA
`!p
root_fz = 16
digitFrom = match.group(1)
unitFrom = match.group(2)
flag = match.group(3)

if unitFrom == "px" and (flag == "e" or flag == "r"):
  digitTo = float(digitFrom) / 16
elif (unitFrom == "em" or unitFrom == "rem") and flag == "p":
  digitTo = float(digitFrom) * 16
else:
  digitTo = float(digitFrom)

if flag == "p":
  unitTo = "px"
elif flag == "e":
  unitTo = "em"
elif flag == "r":
  unitTo = "rem"

snip.rv = str(int(digitTo)) + unitTo if digitTo.is_integer() else str(digitTo) + unitTo`
endsnippet
